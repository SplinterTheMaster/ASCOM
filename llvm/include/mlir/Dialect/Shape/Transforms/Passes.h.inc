/* Autogenerated by mlir-tblgen; don't manually edit */
#ifdef GEN_PASS_CLASSES

//===----------------------------------------------------------------------===//
// RemoveShapeConstraints
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class RemoveShapeConstraintsBase : public ::mlir::FunctionPass {
public:
  RemoveShapeConstraintsBase() : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}
  RemoveShapeConstraintsBase(const RemoveShapeConstraintsBase &) : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  ::llvm::StringRef getArgument() const override { return "remove-shape-constraints"; }

  /// Returns the derived pass name.
  ::llvm::StringRef getName() const override { return "RemoveShapeConstraints"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

protected:
};

//===----------------------------------------------------------------------===//
// ShapeToShapeLowering
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class ShapeToShapeLoweringBase : public ::mlir::FunctionPass {
public:
  ShapeToShapeLoweringBase() : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}
  ShapeToShapeLoweringBase(const ShapeToShapeLoweringBase &) : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  ::llvm::StringRef getArgument() const override { return "shape-to-shape-lowering"; }

  /// Returns the derived pass name.
  ::llvm::StringRef getName() const override { return "ShapeToShapeLowering"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
#ifdef GEN_PASS_REGISTRATION
#define GEN_PASS_REGISTRATION_RemoveShapeConstraints
#define GEN_PASS_REGISTRATION_ShapeToShapeLowering
#endif // GEN_PASS_REGISTRATION
#ifdef GEN_PASS_REGISTRATION_RemoveShapeConstraints
::mlir::registerPass("remove-shape-constraints", "Replace all cstr_ ops with a true witness", []() -> std::unique_ptr<::mlir::Pass> { return mlir::createRemoveShapeConstraintsPass(); });
#endif // GEN_PASS_REGISTRATION_RemoveShapeConstraints
#undef GEN_PASS_REGISTRATION_RemoveShapeConstraints
#ifdef GEN_PASS_REGISTRATION_ShapeToShapeLowering
::mlir::registerPass("shape-to-shape-lowering", "Legalize Shape dialect to be convertible to Standard", []() -> std::unique_ptr<::mlir::Pass> { return mlir::createShapeToShapeLowering(); });
#endif // GEN_PASS_REGISTRATION_ShapeToShapeLowering
#undef GEN_PASS_REGISTRATION_ShapeToShapeLowering
#ifdef GEN_PASS_REGISTRATION
#undef GEN_PASS_REGISTRATION_RemoveShapeConstraints
#undef GEN_PASS_REGISTRATION_ShapeToShapeLowering
#endif // GEN_PASS_REGISTRATION
#undef GEN_PASS_REGISTRATION
