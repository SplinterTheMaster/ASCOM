/* Autogenerated by mlir-tblgen; don't manually edit */
#ifdef GEN_PASS_CLASSES

//===----------------------------------------------------------------------===//
// ExpandAtomic
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class ExpandAtomicBase : public ::mlir::FunctionPass {
public:
  ExpandAtomicBase() : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}
  ExpandAtomicBase(const ExpandAtomicBase &) : ::mlir::FunctionPass(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  ::llvm::StringRef getArgument() const override { return "expand-atomic"; }

  /// Returns the derived pass name.
  ::llvm::StringRef getName() const override { return "ExpandAtomic"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
#ifdef GEN_PASS_REGISTRATION
#define GEN_PASS_REGISTRATION_ExpandAtomic
#endif // GEN_PASS_REGISTRATION
#ifdef GEN_PASS_REGISTRATION_ExpandAtomic
::mlir::registerPass("expand-atomic", "Expands AtomicRMWOp into GenericAtomicRMWOp.", []() -> std::unique_ptr<::mlir::Pass> { return mlir::createExpandAtomicPass(); });
#endif // GEN_PASS_REGISTRATION_ExpandAtomic
#undef GEN_PASS_REGISTRATION_ExpandAtomic
#ifdef GEN_PASS_REGISTRATION
#undef GEN_PASS_REGISTRATION_ExpandAtomic
#endif // GEN_PASS_REGISTRATION
#undef GEN_PASS_REGISTRATION
